name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Debug Directory
      - name: Debug Directory
        run: |
          echo "Current Directory: $(pwd)"
          echo "Listing Directory Contents:"
          ls -al
          echo "Contents of 'myapp' Directory:"
          ls -al myapp

      # # Step 3: Increase Patch Version
      # - name: Bump Patch Version
      #   id: bump-version
      #   run: |
      #     cd myapp # Navigate to the directory containing pom.xml
      #     # Extract the current version dynamically from pom.xml
      #     CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | grep -E "^[0-9]+\.[0-9]+\.[0-9]+$")
      #     echo "Current version: $CURRENT_VERSION"

      #     # Increment the patch version
      #     PATCH=$(echo $CURRENT_VERSION | awk -F. '{print $NF}')
      #     NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v PATCH=$PATCH -v OFS=. '{$NF=PATCH+1; print}')
      #     echo "New version: $NEW_VERSION"

      #     # Update the version in pom.xml
      #     mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false

      #     # Save the new version as an environment variable for subsequent steps
      #     echo "new-version=$NEW_VERSION" >> $GITHUB_ENV

      # # Step 4: Compile and Package the Code
      # - name: Build and Package with Maven
      #   run: |
      #     cd myapp # Navigate to the myapp directory
      #     mvn package -DskipTests

      # # Step 5: Upload the Artifact
      # - name: Upload Build Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: myapp-jar
      #     path: myapp/target/*.jar

      # # Step 6: Build Docker Image
      # - name: Build Docker Image
      #   run: |
      #     docker build \
      #       --build-arg JAR_FILE=myapp-${{ env.new-version }}.jar \
      #       -t ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.new-version }} \
      #       -f ./Dockerfile myapp/target

      # # Step 7: Log in to Docker Hub
      # - name: Log in to Docker Hub
      #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # # Step 8: Push Docker Image to Docker Hub
      # - name: Push Docker Image
      #   run: docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.new-version }}

      # # Step 9: Download and Run the Docker Image
      # - name: Test Docker Image Locally
      #   run: |
      #     docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.new-version }}
      #     docker run --rm --user 1000:1000 ${{ secrets.DOCKER_USERNAME }}/myapp:${{ env.new-version }}

      # # Step 10: Commit Updated Files
      # - name: Commit Updated pom.xml
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"
      #     git add myapp/pom.xml
      #     git commit -m "Bump version to ${{ env.new-version }} [skip ci]"
      #     git push origin master
